//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once

//*****************************************************************************
//
// Notes on the ETW event code generated by MC:
//
// - Structures and arrays of structures are treated as an opaque binary blob.
//   The caller is responsible for packing the data for the structure into a
//   single region of memory, with no padding between values. The macro will
//   have an extra parameter for the length of the blob.
// - Arrays of nul-terminated strings must be packed by the caller into a
//   single binary blob containing the correct number of strings, with a nul
//   after each string. The size of the blob is specified in characters, and
//   includes the final nul.
// - Arrays of SID are treated as a single binary blob. The caller is
//   responsible for packing the SID values into a single region of memory with
//   no padding.
// - The length attribute on the data element in the manifest is significant
//   for values with intype win:UnicodeString, win:AnsiString, or win:Binary.
//   The length attribute must be specified for win:Binary, and is optional for
//   win:UnicodeString and win:AnsiString (if no length is given, the strings
//   are assumed to be nul-terminated). For win:UnicodeString, the length is
//   measured in characters, not bytes.
// - For an array of win:UnicodeString, win:AnsiString, or win:Binary, the
//   length attribute applies to every value in the array, so every value in
//   the array must have the same length. The values in the array are provided
//   to the macro via a single pointer -- the caller is responsible for packing
//   all of the values into a single region of memory with no padding between
//   values.
// - Values of type win:CountedUnicodeString, win:CountedAnsiString, and
//   win:CountedBinary can be generated and collected on Vista or later.
//   However, they may not decode properly without the Windows 10 2018 Fall
//   Update.
// - Arrays of type win:CountedUnicodeString, win:CountedAnsiString, and
//   win:CountedBinary must be packed by the caller into a single region of
//   memory. The format for each item is a UINT16 byte-count followed by that
//   many bytes of data. When providing the array to the generated macro, you
//   must provide the total size of the packed array data, including the UINT16
//   sizes for each item. In the case of win:CountedUnicodeString, the data
//   size is specified in WCHAR (16-bit) units. In the case of
//   win:CountedAnsiString and win:CountedBinary, the data size is specified in
//   bytes.
//
//*****************************************************************************

#include <wmistr.h>
#include <evntrace.h>
#include <evntprov.h>

#ifndef ETW_INLINE
  #ifdef _ETW_KM_
    // In kernel mode, save stack space by never inlining templates.
    #define ETW_INLINE DECLSPEC_NOINLINE __inline
  #else
    // In user mode, save code size by inlining templates as appropriate.
    #define ETW_INLINE __inline
  #endif
#endif // ETW_INLINE

#if defined(__cplusplus)
extern "C" {
#endif

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// MCGEN_USE_KERNEL_MODE_APIS macro:
// Controls whether the generated code uses kernel-mode or user-mode APIs.
// - Set to 0 to use Windows user-mode APIs such as EventRegister.
// - Set to 1 to use Windows kernel-mode APIs such as EtwRegister.
// Default is based on whether the _ETW_KM_ macro is defined (i.e. by wdm.h).
// Note that the APIs can also be overridden directly, e.g. by setting the
// MCGEN_EVENTWRITETRANSFER or MCGEN_EVENTREGISTER macros.
//
#ifndef MCGEN_USE_KERNEL_MODE_APIS
  #ifdef _ETW_KM_
    #define MCGEN_USE_KERNEL_MODE_APIS 1
  #else
    #define MCGEN_USE_KERNEL_MODE_APIS 0
  #endif
#endif // MCGEN_USE_KERNEL_MODE_APIS

//
// MCGEN_HAVE_EVENTSETINFORMATION macro:
// Controls how McGenEventSetInformation uses the EventSetInformation API.
// - Set to 0 to disable the use of EventSetInformation
//   (McGenEventSetInformation will always return an error).
// - Set to 1 to directly invoke MCGEN_EVENTSETINFORMATION.
// - Set to 2 to to locate EventSetInformation at runtime via GetProcAddress
//   (user-mode) or MmGetSystemRoutineAddress (kernel-mode).
// Default is determined as follows:
// - If MCGEN_EVENTSETINFORMATION has been customized, set to 1
//   (i.e. use MCGEN_EVENTSETINFORMATION).
// - Else if the target OS version has EventSetInformation, set to 1
//   (i.e. use MCGEN_EVENTSETINFORMATION).
// - Else set to 2 (i.e. try to dynamically locate EventSetInformation).
// Note that an McGenEventSetInformation function will only be generated if one
// or more provider in a manifest has provider traits.
//
#ifndef MCGEN_HAVE_EVENTSETINFORMATION
  #ifdef MCGEN_EVENTSETINFORMATION             // if MCGEN_EVENTSETINFORMATION has been customized,
    #define MCGEN_HAVE_EVENTSETINFORMATION   1 //   directly invoke MCGEN_EVENTSETINFORMATION(...).
  #elif MCGEN_USE_KERNEL_MODE_APIS             // else if using kernel-mode APIs,
    #if NTDDI_VERSION >= 0x06040000            //   if target OS is Windows 10 or later,
      #define MCGEN_HAVE_EVENTSETINFORMATION 1 //     directly invoke MCGEN_EVENTSETINFORMATION(...).
    #else                                      //   else
      #define MCGEN_HAVE_EVENTSETINFORMATION 2 //     find "EtwSetInformation" via MmGetSystemRoutineAddress.
    #endif                                     // else (using user-mode APIs)
  #else                                        //   if target OS and SDK is Windows 8 or later,
    #if WINVER >= 0x0602 && defined(EVENT_FILTER_TYPE_SCHEMATIZED)
      #define MCGEN_HAVE_EVENTSETINFORMATION 1 //     directly invoke MCGEN_EVENTSETINFORMATION(...).
    #else                                      //   else
      #define MCGEN_HAVE_EVENTSETINFORMATION 2 //     find "EventSetInformation" via GetModuleHandleExW/GetProcAddress.
    #endif
  #endif
#endif // MCGEN_HAVE_EVENTSETINFORMATION

//
// MCGEN Override Macros
//
// The following override macros may be defined before including this header
// to control the APIs used by this header:
//
// - MCGEN_EVENTREGISTER
// - MCGEN_EVENTUNREGISTER
// - MCGEN_EVENTSETINFORMATION
// - MCGEN_EVENTWRITETRANSFER
//
// If the the macro is undefined, the MC implementation will default to the
// corresponding ETW APIs. For example, if the MCGEN_EVENTREGISTER macro is
// undefined, the EventRegister[MyProviderName] macro will use EventRegister
// in user mode and will use EtwRegister in kernel mode.
//
// To prevent issues from conflicting definitions of these macros, the value
// of the override macro will be used as a suffix in certain internal function
// names. Because of this, the override macros must follow certain rules:
//
// - The macro must be defined before any MC-generated header is included and
//   must not be undefined or redefined after any MC-generated header is
//   included. Different translation units (i.e. different .c or .cpp files)
//   may set the macros to different values, but within a translation unit
//   (within a single .c or .cpp file), the macro must be set once and not
//   changed.
// - The override must be an object-like macro, not a function-like macro
//   (i.e. the override macro must not have a parameter list).
// - The override macro's value must be a simple identifier, i.e. must be
//   something that starts with a letter or '_' and contains only letters,
//   numbers, and '_' characters.
// - If the override macro's value is the name of a second object-like macro,
//   the second object-like macro must follow the same rules. (The override
//   macro's value can also be the name of a function-like macro, in which
//   case the function-like macro does not need to follow the same rules.)
//
// For example, the following will cause compile errors:
//
//   #define MCGEN_EVENTWRITETRANSFER MyNamespace::MyClass::MyFunction // Value has non-identifier characters (colon).
//   #define MCGEN_EVENTWRITETRANSFER GetEventWriteFunctionPointer(7)  // Value has non-identifier characters (parentheses).
//   #define MCGEN_EVENTWRITETRANSFER(h,e,a,r,c,d) EventWrite(h,e,c,d) // Override is defined as a function-like macro.
//   #define MY_OBJECT_LIKE_MACRO     MyNamespace::MyClass::MyEventWriteFunction
//   #define MCGEN_EVENTWRITETRANSFER MY_OBJECT_LIKE_MACRO // Evaluates to something with non-identifier characters (colon).
//
// The following would be ok:
//
//   #define MCGEN_EVENTWRITETRANSFER  MyEventWriteFunction1  // OK, suffix will be "MyEventWriteFunction1".
//   #define MY_OBJECT_LIKE_MACRO      MyEventWriteFunction2
//   #define MCGEN_EVENTWRITETRANSFER  MY_OBJECT_LIKE_MACRO   // OK, suffix will be "MyEventWriteFunction2".
//   #define MY_FUNCTION_LIKE_MACRO(h,e,a,r,c,d) MyNamespace::MyClass::MyEventWriteFunction3(h,e,c,d)
//   #define MCGEN_EVENTWRITETRANSFER  MY_FUNCTION_LIKE_MACRO // OK, suffix will be "MY_FUNCTION_LIKE_MACRO".
//
#ifndef MCGEN_EVENTREGISTER
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTREGISTER        EtwRegister
  #else
    #define MCGEN_EVENTREGISTER        EventRegister
  #endif
#endif // MCGEN_EVENTREGISTER
#ifndef MCGEN_EVENTUNREGISTER
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTUNREGISTER      EtwUnregister
  #else
    #define MCGEN_EVENTUNREGISTER      EventUnregister
  #endif
#endif // MCGEN_EVENTUNREGISTER
#ifndef MCGEN_EVENTSETINFORMATION
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTSETINFORMATION  EtwSetInformation
  #else
    #define MCGEN_EVENTSETINFORMATION  EventSetInformation
  #endif
#endif // MCGEN_EVENTSETINFORMATION
#ifndef MCGEN_EVENTWRITETRANSFER
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTWRITETRANSFER   EtwWriteTransfer
  #else
    #define MCGEN_EVENTWRITETRANSFER   EventWriteTransfer
  #endif
#endif // MCGEN_EVENTWRITETRANSFER

//
// MCGEN_EVENT_ENABLED macro:
// Override to control how the EventWrite[EventName] macros determine whether
// an event is enabled. The default behavior is for EventWrite[EventName] to
// use the EventEnabled[EventName] macros.
//
#ifndef MCGEN_EVENT_ENABLED
#define MCGEN_EVENT_ENABLED(EventName) EventEnabled##EventName()
#endif

//
// MCGEN_EVENT_ENABLED_FORCONTEXT macro:
// Override to control how the EventWrite[EventName]_ForContext macros
// determine whether an event is enabled. The default behavior is for
// EventWrite[EventName]_ForContext to use the
// EventEnabled[EventName]_ForContext macros.
//
#ifndef MCGEN_EVENT_ENABLED_FORCONTEXT
#define MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, EventName) EventEnabled##EventName##_ForContext(pContext)
#endif

//
// MCGEN_ENABLE_CHECK macro:
// Determines whether the specified event would be considered as enabled
// based on the state of the specified context. Slightly faster than calling
// McGenEventEnabled directly.
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled && McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
// This structure is for use by MC-generated code and should not be used directly.
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE            RegistrationHandle;
    TRACEHANDLE            Logger;      // Used as pointer to provider traits.
    ULONGLONG              MatchAnyKeyword;
    ULONGLONG              MatchAllKeyword;
    ULONG                  Flags;
    ULONG                  IsEnabled;
    UCHAR                  Level;
    UCHAR                  Reserve;
    USHORT                 EnableBitsCount;
    PULONG                 EnableBitMask;
    const ULONGLONG*       EnableKeyWords;
    const UCHAR*           EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif // MCGEN_TRACE_CONTEXT_DEF

#if !defined(MCGEN_LEVEL_KEYWORD_ENABLED_DEF)
#define MCGEN_LEVEL_KEYWORD_ENABLED_DEF
//
// Determines whether an event with a given Level and Keyword would be
// considered as enabled based on the state of the specified context.
// Note that you may want to use MCGEN_ENABLE_CHECK instead of calling this
// function directly.
//
FORCEINLINE
BOOLEAN
McGenLevelKeywordEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ UCHAR Level,
    _In_ ULONGLONG Keyword
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((Keyword == (ULONGLONG)0) ||
            ((Keyword & EnableInfo->MatchAnyKeyword) &&
             ((Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {
            return TRUE;
        }
    }

    return FALSE;
}
#endif // MCGEN_LEVEL_KEYWORD_ENABLED_DEF

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
//
// Determines whether the specified event would be considered as enabled based
// on the state of the specified context. Note that you may want to use
// MCGEN_ENABLE_CHECK instead of calling this function directly.
//
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ PCEVENT_DESCRIPTOR EventDescriptor
    )
{
    return McGenLevelKeywordEnabled(EnableInfo, EventDescriptor->Level, EventDescriptor->Keyword);
}
#endif // MCGEN_EVENT_ENABLED_DEF

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

// This function is for use by MC-generated code and should not be used directly.
DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    _In_ LPCGUID SourceId,
    _In_ ULONG ControlCode,
    _In_ UCHAR Level,
    _In_ ULONGLONG MatchAnyKeyword,
    _In_ ULONGLONG MatchAllKeyword,
    _In_opt_ PEVENT_FILTER_DESCRIPTOR FilterData,
    _Inout_opt_ PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Windows Vista and later.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider.

    ControlCode - The parameter indicates whether the provider
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category
                      of events that the provider writes.

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
    ULONG Ix;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;

            for (Ix = 0; Ix < Ctx->EnableBitsCount; Ix += 1) {
                if (McGenLevelKeywordEnabled(Ctx, Ctx->EnableLevel[Ix], Ctx->EnableKeyWords[Ix]) != FALSE) {
                    Ctx->EnableBitMask[Ix >> 5] |= (1 << (Ix % 32));
                } else {
                    Ctx->EnableBitMask[Ix >> 5] &= ~(1 << (Ix % 32));
                }
            }
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            if (Ctx->EnableBitsCount > 0) {
#pragma warning(suppress: 26451) // Arithmetic overflow cannot occur, no matter the value of EnableBitCount
                RtlZeroMemory(Ctx->EnableBitMask, (((Ctx->EnableBitsCount - 1) / 32) + 1) * sizeof(ULONG));
            }
            break;

        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif // MCGEN_PRIVATE_ENABLE_CALLBACK_V2

    return;
}

#endif // MCGEN_CONTROL_CALLBACK

#ifndef _mcgen_PENABLECALLBACK
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define _mcgen_PENABLECALLBACK      PETWENABLECALLBACK
  #else
    #define _mcgen_PENABLECALLBACK      PENABLECALLBACK
  #endif
#endif // _mcgen_PENABLECALLBACK

#if !defined(_mcgen_PASTE2)
// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_PASTE2(a, b) _mcgen_PASTE2_imp(a, b)
#define _mcgen_PASTE2_imp(a, b) a##b
#endif // _mcgen_PASTE2

#if !defined(_mcgen_PASTE3)
// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_PASTE3(a, b, c) _mcgen_PASTE3_imp(a, b, c)
#define _mcgen_PASTE3_imp(a, b, c) a##b##_##c
#endif // _mcgen_PASTE3

//
// Macro validation
//

// Validate MCGEN_EVENTREGISTER:

// Trigger an error if MCGEN_EVENTREGISTER is not an unqualified (simple) identifier:
struct _mcgen_PASTE2(MCGEN_EVENTREGISTER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTREGISTER);

// Trigger an error if MCGEN_EVENTREGISTER is redefined:
typedef struct _mcgen_PASTE2(MCGEN_EVENTREGISTER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTREGISTER)
    MCGEN_EVENTREGISTER_must_not_be_redefined_between_headers;

// Trigger an error if MCGEN_EVENTREGISTER is defined as a function-like macro:
typedef void MCGEN_EVENTREGISTER_must_not_be_a_functionLike_macro_MCGEN_EVENTREGISTER;
typedef int _mcgen_PASTE2(MCGEN_EVENTREGISTER_must_not_be_a_functionLike_macro_, MCGEN_EVENTREGISTER);

// Validate MCGEN_EVENTUNREGISTER:

// Trigger an error if MCGEN_EVENTUNREGISTER is not an unqualified (simple) identifier:
struct _mcgen_PASTE2(MCGEN_EVENTUNREGISTER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTUNREGISTER);

// Trigger an error if MCGEN_EVENTUNREGISTER is redefined:
typedef struct _mcgen_PASTE2(MCGEN_EVENTUNREGISTER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTUNREGISTER)
    MCGEN_EVENTUNREGISTER_must_not_be_redefined_between_headers;

// Trigger an error if MCGEN_EVENTUNREGISTER is defined as a function-like macro:
typedef void MCGEN_EVENTUNREGISTER_must_not_be_a_functionLike_macro_MCGEN_EVENTUNREGISTER;
typedef int _mcgen_PASTE2(MCGEN_EVENTUNREGISTER_must_not_be_a_functionLike_macro_, MCGEN_EVENTUNREGISTER);

// Validate MCGEN_EVENTSETINFORMATION:

// Trigger an error if MCGEN_EVENTSETINFORMATION is not an unqualified (simple) identifier:
struct _mcgen_PASTE2(MCGEN_EVENTSETINFORMATION_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTSETINFORMATION);

// Trigger an error if MCGEN_EVENTSETINFORMATION is redefined:
typedef struct _mcgen_PASTE2(MCGEN_EVENTSETINFORMATION_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTSETINFORMATION)
    MCGEN_EVENTSETINFORMATION_must_not_be_redefined_between_headers;

// Trigger an error if MCGEN_EVENTSETINFORMATION is defined as a function-like macro:
typedef void MCGEN_EVENTSETINFORMATION_must_not_be_a_functionLike_macro_MCGEN_EVENTSETINFORMATION;
typedef int _mcgen_PASTE2(MCGEN_EVENTSETINFORMATION_must_not_be_a_functionLike_macro_, MCGEN_EVENTSETINFORMATION);

// Validate MCGEN_EVENTWRITETRANSFER:

// Trigger an error if MCGEN_EVENTWRITETRANSFER is not an unqualified (simple) identifier:
struct _mcgen_PASTE2(MCGEN_EVENTWRITETRANSFER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTWRITETRANSFER);

// Trigger an error if MCGEN_EVENTWRITETRANSFER is redefined:
typedef struct _mcgen_PASTE2(MCGEN_EVENTWRITETRANSFER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTWRITETRANSFER)
    MCGEN_EVENTWRITETRANSFER_must_not_be_redefined_between_headers;;

// Trigger an error if MCGEN_EVENTWRITETRANSFER is defined as a function-like macro:
typedef void MCGEN_EVENTWRITETRANSFER_must_not_be_a_functionLike_macro_MCGEN_EVENTWRITETRANSFER;
typedef int _mcgen_PASTE2(MCGEN_EVENTWRITETRANSFER_must_not_be_a_functionLike_macro_, MCGEN_EVENTWRITETRANSFER);

#ifndef McGenEventWrite_def
#define McGenEventWrite_def

// This macro is for use by MC-generated code and should not be used directly.
#define McGenEventWrite _mcgen_PASTE2(McGenEventWrite_, MCGEN_EVENTWRITETRANSFER)

// This function is for use by MC-generated code and should not be used directly.
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventWrite(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCGUID ActivityId,
    _In_range_(1, 128) ULONG EventDataCount,
    _Pre_cap_(EventDataCount) EVENT_DATA_DESCRIPTOR* EventData
    )
{
    const USHORT UNALIGNED* Traits;

    // Some customized MCGEN_EVENTWRITETRANSFER macros might ignore ActivityId.
    UNREFERENCED_PARAMETER(ActivityId);

    Traits = (const USHORT UNALIGNED*)(UINT_PTR)Context->Logger;

    if (Traits == NULL) {
        EventData[0].Ptr = 0;
        EventData[0].Size = 0;
        EventData[0].Reserved = 0;
    } else {
        EventData[0].Ptr = (ULONG_PTR)Traits;
        EventData[0].Size = *Traits;
        EventData[0].Reserved = 2; // EVENT_DATA_DESCRIPTOR_TYPE_PROVIDER_METADATA
    }

    return MCGEN_EVENTWRITETRANSFER(
        Context->RegistrationHandle,
        Descriptor,
        ActivityId,
        NULL,
        EventDataCount,
        EventData);
}
#endif // McGenEventWrite_def

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister

// This macro is for use by MC-generated code and should not be used directly.
#define McGenEventRegister _mcgen_PASTE2(McGenEventRegister_, MCGEN_EVENTREGISTER)

#pragma warning(push)
#pragma warning(disable:6103)
// This function is for use by MC-generated code and should not be used directly.
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ _mcgen_PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function registers the provider with ETW.

Arguments:

    ProviderId - Provider ID to register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for the callback.

    RegHandle - Pointer to registration handle.

Remarks:

    Should not be called if the provider is already registered (i.e. should not
    be called if *RegHandle != 0). Repeatedly registering a provider is a bug
    and may indicate a race condition. However, for compatibility with previous
    behavior, this function will return SUCCESS in this case.

--*/
{
    ULONG Error;

    if (*RegHandle != 0)
    {
        Error = 0; // ERROR_SUCCESS
    }
    else
    {
        Error = MCGEN_EVENTREGISTER(ProviderId, EnableCallback, CallbackContext, RegHandle);
    }

    return Error;
}
#pragma warning(pop)

// This macro is for use by MC-generated code and should not be used directly.
#define McGenEventUnregister _mcgen_PASTE2(McGenEventUnregister_, MCGEN_EVENTUNREGISTER)

// This function is for use by MC-generated code and should not be used directly.
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW and set *RegHandle = 0.

Arguments:

    RegHandle - the pointer to the provider registration handle

Remarks:

    If provider has not been registered (i.e. if *RegHandle == 0),
    return SUCCESS. It is safe to call McGenEventUnregister even if the
    call to McGenEventRegister returned an error.

--*/
{
    ULONG Error;

    if(*RegHandle == 0)
    {
        Error = 0; // ERROR_SUCCESS
    }
    else
    {
        Error = MCGEN_EVENTUNREGISTER(*RegHandle);
        *RegHandle = (REGHANDLE)0;
    }

    return Error;
}

#endif // McGenEventRegisterUnregister

#ifndef _mcgen_EVENT_BIT_SET
  #if defined(_M_IX86) || defined(_M_X64)
    // This macro is for use by MC-generated code and should not be used directly.
    #define _mcgen_EVENT_BIT_SET(EnableBits, BitPosition) ((((const unsigned char*)EnableBits)[BitPosition >> 3] & (1u << (BitPosition & 7))) != 0)
  #else // CPU type
    // This macro is for use by MC-generated code and should not be used directly.
    #define _mcgen_EVENT_BIT_SET(EnableBits, BitPosition) ((EnableBits[BitPosition >> 5] & (1u << (BitPosition & 31))) != 0)
  #endif // CPU type
#endif // _mcgen_EVENT_BIT_SET

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Provider "Microsoft-AdCenter-HashStore-ETWProvider" event count 29
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Provider GUID = 2ebc6bf8-99a6-4148-9170-858e206c6572
EXTERN_C __declspec(selectany) const GUID HashStoreEtwTracingProviderGuid = {0x2ebc6bf8, 0x99a6, 0x4148, {0x91, 0x70, 0x85, 0x8e, 0x20, 0x6c, 0x65, 0x72}};

#ifndef HashStoreEtwTracingProviderGuid_Traits
#define HashStoreEtwTracingProviderGuid_Traits NULL
#endif // HashStoreEtwTracingProviderGuid_Traits

//
// Opcodes
//
#define OPCODE_REFRESH_PREPARE_UPDATE_BEGIN 0xb
#define OPCODE_REFRESH_PREPARE_UPDATE_COMPLETE 0xc
#define OPCODE_REFRESH_UPDATETABLE_BEGIN_BEGIN 0xd
#define OPCODE_REFRESH_UPDATETABLE_COMPLETE_COMPLETE 0xe
#define OPCODE_READDATA_PREPARE_BEGIN 0xb
#define OPCODE_READDATA_PREPARE_COMPLETE 0xc
#define OPCODE_READDATA_GET_BLOCKINFO_BEGIN 0xd
#define OPCODE_READDATA_GET_BLOCK_INFO_COMPLETE 0xe
#define OPCODE_GET_BLOCK_CONTENT_BEGIN 0xf
#define OPCODE_GET_BLOCK_CONTENT_COMPLETE 0x10
#define OPCODE_CACHE_LOOKUP_BEGIN 0xb
#define OPCODE_UPDATE_CACHE_COMPLETE 0xc
#define OPCODE_CACHE_RELEASE_HANDLE_BEGIN 0xd
#define OPCODE_CACHE_RELEASE_HANDLE_COMPLETE 0xe
#define OPCODE_CACHE_UPDATE_BEGIN 0xf
#define OPCODE_CACHE_UPDATE_COMPLETE 0x10
#define OPCODE_READ_BLOCKS_BEGIN 0xb
#define OPCODE_READ_BLOCKS_COMPLETE 0xc
#define OPCODE_WAIT_FOR_IO_BEGIN 0xd
#define OPCODE_WAIT_FOR_IO_COMPLETE 0xe
#define OPCODE_GET_RECORDS_AND_UPDATE_CACHE_BEGIN 0xf
#define OPCODE_GET_RECORDS_AND_UPDATE_CACHE_COMPLETE 0x10
#define OPCODE_REQUEST_PROCESS_SUMMARY 0xb
#define OPCODE_READ_MEMORY_RECORD 0xb
#define OPCODE_HITTED_KEY 0xc
#define OPCODE_REHASH_BEING 0xb
#define OPCODE_REHASH_COMPLETE 0xc
#define OPCODE_EXPAND_BEING 0xd
#define OPCODE_EXPAND_COMPLETE 0xe

//
// Tasks
//
#define HASHSTORE_DATA_REFRESH_TASK 0x1
EXTERN_C __declspec(selectany) const GUID HashStoreDataRefreshTaskId = {0x062c31ef, 0xd0fa, 0x413d, {0xa9, 0xba, 0x1a, 0x74, 0xfe, 0xee, 0xa4, 0x1b}};
#define HASHSTORE_READDATA_PROCESSING_TASK 0x2
EXTERN_C __declspec(selectany) const GUID HashStoreReadDataTaskId = {0xcd7c1252, 0x2cb2, 0x46cc, {0xa3, 0x2e, 0xd5, 0xa0, 0x30, 0x83, 0x71, 0xd6}};
#define HASHSTORE_CACHE_PROCESSING_TASK 0x3
EXTERN_C __declspec(selectany) const GUID HashStoreCacheProcessingTaskId = {0xcf4d0aa5, 0x1779, 0x4934, {0xbb, 0x7b, 0x1a, 0x25, 0x41, 0x7e, 0xc6, 0x11}};
#define HASHSTORE_BLOCKDATA_PROCESSING_TASK 0x4
EXTERN_C __declspec(selectany) const GUID HashStoreGetContentsDetailsTaskId = {0x2990ff4a, 0x9ed8, 0x41e4, {0x88, 0x40, 0x4f, 0x44, 0xb8, 0x90, 0xfd, 0x6a}};
#define HASHSTORE_REQUEST_SUMMARY_TASK 0x5
EXTERN_C __declspec(selectany) const GUID HashStoreRequestSummaryTaskId = {0xe9291f7e, 0x3586, 0x4928, {0x87, 0x8d, 0x3b, 0x12, 0x7c, 0xc1, 0x62, 0x49}};
#define HASHSTORE_INFORMATION_TASK 0x6
EXTERN_C __declspec(selectany) const GUID HashStoreInformationTaskId = {0x35375424, 0x9a0a, 0x451e, {0xa0, 0xe0, 0x41, 0xf4, 0xd4, 0xb5, 0x03, 0xf9}};
#define HASHSTORE_REHASH_TASK 0x7
EXTERN_C __declspec(selectany) const GUID HashStoreRehashTaskId = {0xdfd79980, 0x2a89, 0x402b, {0xa0, 0x99, 0x3b, 0xd0, 0x23, 0x50, 0x7c, 0x10}};

//
// Keyword
//
#define HASH_STORE 0x1

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadMemoryRecordEvent = {0x1, 0x0, 0x0, 0x4, 0xb, 0x6, 0x1};
#define ReadMemoryRecordEvent_value 0x1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR HittedKeyEvent = {0x2, 0x0, 0x0, 0x4, 0xc, 0x6, 0x0};
#define HittedKeyEvent_value 0x2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Refresh_PrepareUpdate_Begin_Event = {0x3, 0x0, 0x0, 0x4, 0xb, 0x1, 0x1};
#define Refresh_PrepareUpdate_Begin_Event_value 0x3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Refresh_PrepareUpdate_Complete_Event = {0x4, 0x0, 0x0, 0x4, 0xc, 0x1, 0x1};
#define Refresh_PrepareUpdate_Complete_Event_value 0x4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Refresh_UpdateTable_Begin_Event = {0x5, 0x0, 0x0, 0x4, 0xd, 0x1, 0x1};
#define Refresh_UpdateTable_Begin_Event_value 0x5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Refresh_UpdateTable_Complete_Event = {0x6, 0x0, 0x0, 0x4, 0xe, 0x1, 0x1};
#define Refresh_UpdateTable_Complete_Event_value 0x6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadData_Prepare_Begin_Event = {0x7, 0x0, 0x0, 0x4, 0xb, 0x2, 0x1};
#define ReadData_Prepare_Begin_Event_value 0x7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadData_Prepare_Complete_Event = {0x8, 0x0, 0x0, 0x4, 0xc, 0x2, 0x1};
#define ReadData_Prepare_Complete_Event_value 0x8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadData_GetBlockInfo_Begin_Event = {0x9, 0x0, 0x0, 0x4, 0xd, 0x2, 0x1};
#define ReadData_GetBlockInfo_Begin_Event_value 0x9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadData_GetBlockInfo_Complete_Event = {0xa, 0x0, 0x0, 0x4, 0xe, 0x2, 0x1};
#define ReadData_GetBlockInfo_Complete_Event_value 0xa
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadData_GetBlocksContent_Begin_Event = {0xb, 0x0, 0x0, 0x4, 0xf, 0x2, 0x1};
#define ReadData_GetBlocksContent_Begin_Event_value 0xb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadData_GetBlocksContent_Complete_Event = {0xc, 0x0, 0x0, 0x4, 0x10, 0x2, 0x1};
#define ReadData_GetBlocksContent_Complete_Event_value 0xc
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Cache_Lookup_Begin_Event = {0xd, 0x0, 0x0, 0x4, 0xb, 0x3, 0x1};
#define Cache_Lookup_Begin_Event_value 0xd
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Cache_Lookup_Complete_Event = {0xe, 0x0, 0x0, 0x4, 0xc, 0x3, 0x1};
#define Cache_Lookup_Complete_Event_value 0xe
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Cache_ReleaseHandle_Begin_Event = {0xf, 0x0, 0x0, 0x4, 0xd, 0x3, 0x1};
#define Cache_ReleaseHandle_Begin_Event_value 0xf
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Cache_ReleaseHandle_Complete_Event = {0x10, 0x0, 0x0, 0x4, 0xe, 0x3, 0x1};
#define Cache_ReleaseHandle_Complete_Event_value 0x10
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Cache_Update_Begin_Event = {0x11, 0x0, 0x0, 0x4, 0xf, 0x3, 0x1};
#define Cache_Update_Begin_Event_value 0x11
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR Cache_Update_Complete_Event = {0x12, 0x0, 0x0, 0x4, 0x10, 0x3, 0x1};
#define Cache_Update_Complete_Event_value 0x12
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadData_GetBlocksContent_ReadBlocks_Begin_Event = {0x13, 0x0, 0x0, 0x4, 0xb, 0x4, 0x1};
#define ReadData_GetBlocksContent_ReadBlocks_Begin_Event_value 0x13
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadData_GetBlocksContent_ReadBlocks_Complete_Event = {0x14, 0x0, 0x0, 0x4, 0xc, 0x4, 0x1};
#define ReadData_GetBlocksContent_ReadBlocks_Complete_Event_value 0x14
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadData_GetBlocksContent_WaitForIO_Begin_Event = {0x15, 0x0, 0x0, 0x4, 0xd, 0x4, 0x1};
#define ReadData_GetBlocksContent_WaitForIO_Begin_Event_value 0x15
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadData_GetBlocksContent_WaitForIO_Complete_Event = {0x16, 0x0, 0x0, 0x4, 0xe, 0x4, 0x1};
#define ReadData_GetBlocksContent_WaitForIO_Complete_Event_value 0x16
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event = {0x17, 0x0, 0x0, 0x4, 0xf, 0x4, 0x1};
#define ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event_value 0x17
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event = {0x18, 0x0, 0x0, 0x4, 0x10, 0x4, 0x1};
#define ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event_value 0x18
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RequestProcessSummaryEvent = {0x19, 0x0, 0x0, 0x4, 0xb, 0x5, 0x1};
#define RequestProcessSummaryEvent_value 0x19
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RehashBeginEvent = {0x1a, 0x0, 0x0, 0x4, 0xb, 0x7, 0x1};
#define RehashBeginEvent_value 0x1a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RehashCompleteEvent = {0x1b, 0x0, 0x0, 0x4, 0xc, 0x7, 0x1};
#define RehashCompleteEvent_value 0x1b
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RehashExpandBeginEvent = {0x1c, 0x0, 0x0, 0x4, 0xd, 0x7, 0x1};
#define RehashExpandBeginEvent_value 0x1c
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RehashExpandCompleteEvent = {0x1d, 0x0, 0x0, 0x4, 0xe, 0x7, 0x1};
#define RehashExpandCompleteEvent_value 0x1d

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Event Enablement Bits
// These variables are for use by MC-generated code and should not be used directly.
//
EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG Microsoft_AdCenter_HashStore_ETWProviderEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG Microsoft_AdCenter_HashStore_ETWProviderKeywords[2] = {0x1, 0x0};
EXTERN_C __declspec(selectany) const unsigned char Microsoft_AdCenter_HashStore_ETWProviderLevels[2] = {4, 4};

//
// Provider context
//
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT HashStoreEtwTracingProviderGuid_Context = {0, (ULONG_PTR)HashStoreEtwTracingProviderGuid_Traits, 0, 0, 0, 0, 0, 0, 2, Microsoft_AdCenter_HashStore_ETWProviderEnableBits, Microsoft_AdCenter_HashStore_ETWProviderKeywords, Microsoft_AdCenter_HashStore_ETWProviderLevels};

//
// Provider REGHANDLE
//
#define Microsoft_AdCenter_HashStore_ETWProviderHandle (HashStoreEtwTracingProviderGuid_Context.RegistrationHandle)

//
// This macro is set to 0, indicating that the EventWrite[Name] macros do not
// have an Activity parameter. This is controlled by the -km and -um options.
//
#define HashStoreEtwTracingProviderGuid_EventWriteActivity 0

//
// Register with ETW using the control GUID specified in the manifest.
// Invoke this macro during module initialization (i.e. program startup,
// DLL process attach, or driver load) to initialize the provider.
// Note that if this function returns an error, the error means that
// will not work, but no action needs to be taken -- even if EventRegister
// returns an error, it is generally safe to use EventWrite and
// EventUnregister macros (they will be no-ops if EventRegister failed).
//
#ifndef EventRegisterMicrosoft_AdCenter_HashStore_ETWProvider
#define EventRegisterMicrosoft_AdCenter_HashStore_ETWProvider() McGenEventRegister(&HashStoreEtwTracingProviderGuid, McGenControlCallbackV2, &HashStoreEtwTracingProviderGuid_Context, &Microsoft_AdCenter_HashStore_ETWProviderHandle)
#endif

//
// Register with ETW using a specific control GUID (i.e. a GUID other than what
// is specified in the manifest). Advanced scenarios only.
//
#ifndef EventRegisterByGuidMicrosoft_AdCenter_HashStore_ETWProvider
#define EventRegisterByGuidMicrosoft_AdCenter_HashStore_ETWProvider(Guid) McGenEventRegister(&(Guid), McGenControlCallbackV2, &HashStoreEtwTracingProviderGuid_Context, &Microsoft_AdCenter_HashStore_ETWProviderHandle)
#endif

//
// Unregister with ETW and close the provider.
// Invoke this macro during module shutdown (i.e. program exit, DLL process
// detach, or driver unload) to unregister the provider.
// Note that you MUST call EventUnregister before DLL or driver unload
// (not optional): failure to unregister a provider before DLL or driver unload
// will result in crashes.
//
#ifndef EventUnregisterMicrosoft_AdCenter_HashStore_ETWProvider
#define EventUnregisterMicrosoft_AdCenter_HashStore_ETWProvider() McGenEventUnregister(&Microsoft_AdCenter_HashStore_ETWProviderHandle)
#endif

//
// MCGEN_ENABLE_FORCONTEXT_CODE_GENERATION macro:
// Define this macro to enable support for caller-allocated provider context.
//
#ifdef MCGEN_ENABLE_FORCONTEXT_CODE_GENERATION

//
// Advanced scenarios: Caller-allocated provider context.
// Use when multiple differently-configured provider handles are needed,
// e.g. for container-aware drivers, one context per container.
//
// Usage:
//
// - Caller enables the feature before including this header, e.g.
//   #define MCGEN_ENABLE_FORCONTEXT_CODE_GENERATION 1
// - Caller allocates memory, e.g. pContext = malloc(sizeof(McGenContext_Microsoft_AdCenter_HashStore_ETWProvider));
// - Caller registers the provider, e.g. EventRegisterMicrosoft_AdCenter_HashStore_ETWProvider_ForContext(pContext);
// - Caller writes events, e.g. EventWriteMyEvent_ForContext(pContext, ...);
// - Caller unregisters, e.g. EventUnregisterMicrosoft_AdCenter_HashStore_ETWProvider_ForContext(pContext);
// - Caller frees memory, e.g. free(pContext);
//

typedef struct tagMcGenContext_Microsoft_AdCenter_HashStore_ETWProvider {
    // The fields of this structure are subject to change and should
    // not be accessed directly. To access the provider's REGHANDLE,
    // use Microsoft_AdCenter_HashStore_ETWProviderHandle_ForContext(pContext).
    MCGEN_TRACE_CONTEXT Context;
    ULONG EnableBits[1];
} McGenContext_Microsoft_AdCenter_HashStore_ETWProvider;

#define EventRegisterMicrosoft_AdCenter_HashStore_ETWProvider_ForContext(pContext)             _mcgen_PASTE2(_mcgen_RegisterForContext_Microsoft_AdCenter_HashStore_ETWProvider_, MCGEN_EVENTREGISTER)(&HashStoreEtwTracingProviderGuid, pContext)
#define EventRegisterByGuidMicrosoft_AdCenter_HashStore_ETWProvider_ForContext(Guid, pContext) _mcgen_PASTE2(_mcgen_RegisterForContext_Microsoft_AdCenter_HashStore_ETWProvider_, MCGEN_EVENTREGISTER)(&(Guid), pContext)
#define EventUnregisterMicrosoft_AdCenter_HashStore_ETWProvider_ForContext(pContext)           McGenEventUnregister(&(pContext)->Context.RegistrationHandle)

//
// Provider REGHANDLE for caller-allocated context.
//
#define Microsoft_AdCenter_HashStore_ETWProviderHandle_ForContext(pContext) ((pContext)->Context.RegistrationHandle)

// This function is for use by MC-generated code and should not be used directly.
// Initialize and register the caller-allocated context.
__inline
ULONG __stdcall
_mcgen_PASTE2(_mcgen_RegisterForContext_Microsoft_AdCenter_HashStore_ETWProvider_, MCGEN_EVENTREGISTER)(
    _In_ LPCGUID pProviderId,
    _Out_ McGenContext_Microsoft_AdCenter_HashStore_ETWProvider* pContext)
{
    RtlZeroMemory(pContext, sizeof(*pContext));
    pContext->Context.Logger = (ULONG_PTR)HashStoreEtwTracingProviderGuid_Traits;
    pContext->Context.EnableBitsCount = 2;
    pContext->Context.EnableBitMask = pContext->EnableBits;
    pContext->Context.EnableKeyWords = Microsoft_AdCenter_HashStore_ETWProviderKeywords;
    pContext->Context.EnableLevel = Microsoft_AdCenter_HashStore_ETWProviderLevels;
    return McGenEventRegister(
        pProviderId,
        McGenControlCallbackV2,
        &pContext->Context,
        &pContext->Context.RegistrationHandle);
}

// This function is for use by MC-generated code and should not be used directly.
// Trigger a compile error if called with the wrong parameter type.
FORCEINLINE
_Ret_ McGenContext_Microsoft_AdCenter_HashStore_ETWProvider*
_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(_In_ McGenContext_Microsoft_AdCenter_HashStore_ETWProvider* pContext)
{
    return pContext;
}

#endif // MCGEN_ENABLE_FORCONTEXT_CODE_GENERATION

//
// Enablement check macro for event "ReadMemoryRecordEvent"
//
#define EventEnabledReadMemoryRecordEvent() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledReadMemoryRecordEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "ReadMemoryRecordEvent"
//
#define EventWriteReadMemoryRecordEvent(recordAddress, recordSize) \
        MCGEN_EVENT_ENABLED(ReadMemoryRecordEvent) \
        ? _mcgen_TEMPLATE_FOR_ReadMemoryRecordEvent(&HashStoreEtwTracingProviderGuid_Context, &ReadMemoryRecordEvent, recordAddress, recordSize) : 0
#define EventWriteReadMemoryRecordEvent_AssumeEnabled(recordAddress, recordSize) \
        _mcgen_TEMPLATE_FOR_ReadMemoryRecordEvent(&HashStoreEtwTracingProviderGuid_Context, &ReadMemoryRecordEvent, recordAddress, recordSize)
#define EventWriteReadMemoryRecordEvent_ForContext(pContext, recordAddress, recordSize) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ReadMemoryRecordEvent) \
        ? _mcgen_TEMPLATE_FOR_ReadMemoryRecordEvent(&(pContext)->Context, &ReadMemoryRecordEvent, recordAddress, recordSize) : 0
#define EventWriteReadMemoryRecordEvent_ForContextAssumeEnabled(pContext, recordAddress, recordSize) \
        _mcgen_TEMPLATE_FOR_ReadMemoryRecordEvent(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &ReadMemoryRecordEvent, recordAddress, recordSize)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ReadMemoryRecordEvent _mcgen_PASTE2(McTemplateU0xq_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "HittedKeyEvent"
//
#define EventEnabledHittedKeyEvent() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 1)
#define EventEnabledHittedKeyEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 1)

//
// Event write macros for event "HittedKeyEvent"
//
#define EventWriteHittedKeyEvent(RequestGuid, Key, TableName) \
        MCGEN_EVENT_ENABLED(HittedKeyEvent) \
        ? _mcgen_TEMPLATE_FOR_HittedKeyEvent(&HashStoreEtwTracingProviderGuid_Context, &HittedKeyEvent, RequestGuid, Key, TableName) : 0
#define EventWriteHittedKeyEvent_AssumeEnabled(RequestGuid, Key, TableName) \
        _mcgen_TEMPLATE_FOR_HittedKeyEvent(&HashStoreEtwTracingProviderGuid_Context, &HittedKeyEvent, RequestGuid, Key, TableName)
#define EventWriteHittedKeyEvent_ForContext(pContext, RequestGuid, Key, TableName) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, HittedKeyEvent) \
        ? _mcgen_TEMPLATE_FOR_HittedKeyEvent(&(pContext)->Context, &HittedKeyEvent, RequestGuid, Key, TableName) : 0
#define EventWriteHittedKeyEvent_ForContextAssumeEnabled(pContext, RequestGuid, Key, TableName) \
        _mcgen_TEMPLATE_FOR_HittedKeyEvent(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &HittedKeyEvent, RequestGuid, Key, TableName)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_HittedKeyEvent _mcgen_PASTE2(McTemplateU0sss_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "Refresh_PrepareUpdate_Begin_Event"
//
#define EventEnabledRefresh_PrepareUpdate_Begin_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledRefresh_PrepareUpdate_Begin_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "Refresh_PrepareUpdate_Begin_Event"
//
#define EventWriteRefresh_PrepareUpdate_Begin_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(Refresh_PrepareUpdate_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_Refresh_PrepareUpdate_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &Refresh_PrepareUpdate_Begin_Event, RequestGuid) : 0
#define EventWriteRefresh_PrepareUpdate_Begin_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_Refresh_PrepareUpdate_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &Refresh_PrepareUpdate_Begin_Event, RequestGuid)
#define EventWriteRefresh_PrepareUpdate_Begin_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, Refresh_PrepareUpdate_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_Refresh_PrepareUpdate_Begin_Event(&(pContext)->Context, &Refresh_PrepareUpdate_Begin_Event, RequestGuid) : 0
#define EventWriteRefresh_PrepareUpdate_Begin_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_Refresh_PrepareUpdate_Begin_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &Refresh_PrepareUpdate_Begin_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_Refresh_PrepareUpdate_Begin_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "Refresh_PrepareUpdate_Complete_Event"
//
#define EventEnabledRefresh_PrepareUpdate_Complete_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledRefresh_PrepareUpdate_Complete_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "Refresh_PrepareUpdate_Complete_Event"
//
#define EventWriteRefresh_PrepareUpdate_Complete_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(Refresh_PrepareUpdate_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_Refresh_PrepareUpdate_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &Refresh_PrepareUpdate_Complete_Event, RequestGuid) : 0
#define EventWriteRefresh_PrepareUpdate_Complete_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_Refresh_PrepareUpdate_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &Refresh_PrepareUpdate_Complete_Event, RequestGuid)
#define EventWriteRefresh_PrepareUpdate_Complete_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, Refresh_PrepareUpdate_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_Refresh_PrepareUpdate_Complete_Event(&(pContext)->Context, &Refresh_PrepareUpdate_Complete_Event, RequestGuid) : 0
#define EventWriteRefresh_PrepareUpdate_Complete_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_Refresh_PrepareUpdate_Complete_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &Refresh_PrepareUpdate_Complete_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_Refresh_PrepareUpdate_Complete_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "Refresh_UpdateTable_Begin_Event"
//
#define EventEnabledRefresh_UpdateTable_Begin_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledRefresh_UpdateTable_Begin_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "Refresh_UpdateTable_Begin_Event"
//
#define EventWriteRefresh_UpdateTable_Begin_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(Refresh_UpdateTable_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_Refresh_UpdateTable_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &Refresh_UpdateTable_Begin_Event, RequestGuid) : 0
#define EventWriteRefresh_UpdateTable_Begin_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_Refresh_UpdateTable_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &Refresh_UpdateTable_Begin_Event, RequestGuid)
#define EventWriteRefresh_UpdateTable_Begin_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, Refresh_UpdateTable_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_Refresh_UpdateTable_Begin_Event(&(pContext)->Context, &Refresh_UpdateTable_Begin_Event, RequestGuid) : 0
#define EventWriteRefresh_UpdateTable_Begin_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_Refresh_UpdateTable_Begin_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &Refresh_UpdateTable_Begin_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_Refresh_UpdateTable_Begin_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "Refresh_UpdateTable_Complete_Event"
//
#define EventEnabledRefresh_UpdateTable_Complete_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledRefresh_UpdateTable_Complete_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "Refresh_UpdateTable_Complete_Event"
//
#define EventWriteRefresh_UpdateTable_Complete_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(Refresh_UpdateTable_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_Refresh_UpdateTable_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &Refresh_UpdateTable_Complete_Event, RequestGuid) : 0
#define EventWriteRefresh_UpdateTable_Complete_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_Refresh_UpdateTable_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &Refresh_UpdateTable_Complete_Event, RequestGuid)
#define EventWriteRefresh_UpdateTable_Complete_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, Refresh_UpdateTable_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_Refresh_UpdateTable_Complete_Event(&(pContext)->Context, &Refresh_UpdateTable_Complete_Event, RequestGuid) : 0
#define EventWriteRefresh_UpdateTable_Complete_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_Refresh_UpdateTable_Complete_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &Refresh_UpdateTable_Complete_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_Refresh_UpdateTable_Complete_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "ReadData_Prepare_Begin_Event"
//
#define EventEnabledReadData_Prepare_Begin_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledReadData_Prepare_Begin_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "ReadData_Prepare_Begin_Event"
//
#define EventWriteReadData_Prepare_Begin_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(ReadData_Prepare_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_Prepare_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_Prepare_Begin_Event, RequestGuid) : 0
#define EventWriteReadData_Prepare_Begin_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_Prepare_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_Prepare_Begin_Event, RequestGuid)
#define EventWriteReadData_Prepare_Begin_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ReadData_Prepare_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_Prepare_Begin_Event(&(pContext)->Context, &ReadData_Prepare_Begin_Event, RequestGuid) : 0
#define EventWriteReadData_Prepare_Begin_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_Prepare_Begin_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &ReadData_Prepare_Begin_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ReadData_Prepare_Begin_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "ReadData_Prepare_Complete_Event"
//
#define EventEnabledReadData_Prepare_Complete_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledReadData_Prepare_Complete_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "ReadData_Prepare_Complete_Event"
//
#define EventWriteReadData_Prepare_Complete_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(ReadData_Prepare_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_Prepare_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_Prepare_Complete_Event, RequestGuid) : 0
#define EventWriteReadData_Prepare_Complete_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_Prepare_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_Prepare_Complete_Event, RequestGuid)
#define EventWriteReadData_Prepare_Complete_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ReadData_Prepare_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_Prepare_Complete_Event(&(pContext)->Context, &ReadData_Prepare_Complete_Event, RequestGuid) : 0
#define EventWriteReadData_Prepare_Complete_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_Prepare_Complete_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &ReadData_Prepare_Complete_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ReadData_Prepare_Complete_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "ReadData_GetBlockInfo_Begin_Event"
//
#define EventEnabledReadData_GetBlockInfo_Begin_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledReadData_GetBlockInfo_Begin_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "ReadData_GetBlockInfo_Begin_Event"
//
#define EventWriteReadData_GetBlockInfo_Begin_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(ReadData_GetBlockInfo_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlockInfo_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlockInfo_Begin_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlockInfo_Begin_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlockInfo_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlockInfo_Begin_Event, RequestGuid)
#define EventWriteReadData_GetBlockInfo_Begin_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ReadData_GetBlockInfo_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlockInfo_Begin_Event(&(pContext)->Context, &ReadData_GetBlockInfo_Begin_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlockInfo_Begin_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlockInfo_Begin_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &ReadData_GetBlockInfo_Begin_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ReadData_GetBlockInfo_Begin_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "ReadData_GetBlockInfo_Complete_Event"
//
#define EventEnabledReadData_GetBlockInfo_Complete_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledReadData_GetBlockInfo_Complete_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "ReadData_GetBlockInfo_Complete_Event"
//
#define EventWriteReadData_GetBlockInfo_Complete_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(ReadData_GetBlockInfo_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlockInfo_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlockInfo_Complete_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlockInfo_Complete_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlockInfo_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlockInfo_Complete_Event, RequestGuid)
#define EventWriteReadData_GetBlockInfo_Complete_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ReadData_GetBlockInfo_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlockInfo_Complete_Event(&(pContext)->Context, &ReadData_GetBlockInfo_Complete_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlockInfo_Complete_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlockInfo_Complete_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &ReadData_GetBlockInfo_Complete_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ReadData_GetBlockInfo_Complete_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "ReadData_GetBlocksContent_Begin_Event"
//
#define EventEnabledReadData_GetBlocksContent_Begin_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledReadData_GetBlocksContent_Begin_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "ReadData_GetBlocksContent_Begin_Event"
//
#define EventWriteReadData_GetBlocksContent_Begin_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(ReadData_GetBlocksContent_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_Begin_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_Begin_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_Begin_Event, RequestGuid)
#define EventWriteReadData_GetBlocksContent_Begin_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ReadData_GetBlocksContent_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_Begin_Event(&(pContext)->Context, &ReadData_GetBlocksContent_Begin_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_Begin_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_Begin_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &ReadData_GetBlocksContent_Begin_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_Begin_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "ReadData_GetBlocksContent_Complete_Event"
//
#define EventEnabledReadData_GetBlocksContent_Complete_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledReadData_GetBlocksContent_Complete_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "ReadData_GetBlocksContent_Complete_Event"
//
#define EventWriteReadData_GetBlocksContent_Complete_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(ReadData_GetBlocksContent_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_Complete_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_Complete_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_Complete_Event, RequestGuid)
#define EventWriteReadData_GetBlocksContent_Complete_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ReadData_GetBlocksContent_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_Complete_Event(&(pContext)->Context, &ReadData_GetBlocksContent_Complete_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_Complete_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_Complete_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &ReadData_GetBlocksContent_Complete_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_Complete_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "Cache_Lookup_Begin_Event"
//
#define EventEnabledCache_Lookup_Begin_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledCache_Lookup_Begin_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "Cache_Lookup_Begin_Event"
//
#define EventWriteCache_Lookup_Begin_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(Cache_Lookup_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_Cache_Lookup_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &Cache_Lookup_Begin_Event, RequestGuid) : 0
#define EventWriteCache_Lookup_Begin_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_Cache_Lookup_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &Cache_Lookup_Begin_Event, RequestGuid)
#define EventWriteCache_Lookup_Begin_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, Cache_Lookup_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_Cache_Lookup_Begin_Event(&(pContext)->Context, &Cache_Lookup_Begin_Event, RequestGuid) : 0
#define EventWriteCache_Lookup_Begin_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_Cache_Lookup_Begin_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &Cache_Lookup_Begin_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_Cache_Lookup_Begin_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "Cache_Lookup_Complete_Event"
//
#define EventEnabledCache_Lookup_Complete_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledCache_Lookup_Complete_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "Cache_Lookup_Complete_Event"
//
#define EventWriteCache_Lookup_Complete_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(Cache_Lookup_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_Cache_Lookup_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &Cache_Lookup_Complete_Event, RequestGuid) : 0
#define EventWriteCache_Lookup_Complete_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_Cache_Lookup_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &Cache_Lookup_Complete_Event, RequestGuid)
#define EventWriteCache_Lookup_Complete_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, Cache_Lookup_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_Cache_Lookup_Complete_Event(&(pContext)->Context, &Cache_Lookup_Complete_Event, RequestGuid) : 0
#define EventWriteCache_Lookup_Complete_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_Cache_Lookup_Complete_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &Cache_Lookup_Complete_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_Cache_Lookup_Complete_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "Cache_ReleaseHandle_Begin_Event"
//
#define EventEnabledCache_ReleaseHandle_Begin_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledCache_ReleaseHandle_Begin_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "Cache_ReleaseHandle_Begin_Event"
//
#define EventWriteCache_ReleaseHandle_Begin_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(Cache_ReleaseHandle_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_Cache_ReleaseHandle_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &Cache_ReleaseHandle_Begin_Event, RequestGuid) : 0
#define EventWriteCache_ReleaseHandle_Begin_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_Cache_ReleaseHandle_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &Cache_ReleaseHandle_Begin_Event, RequestGuid)
#define EventWriteCache_ReleaseHandle_Begin_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, Cache_ReleaseHandle_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_Cache_ReleaseHandle_Begin_Event(&(pContext)->Context, &Cache_ReleaseHandle_Begin_Event, RequestGuid) : 0
#define EventWriteCache_ReleaseHandle_Begin_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_Cache_ReleaseHandle_Begin_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &Cache_ReleaseHandle_Begin_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_Cache_ReleaseHandle_Begin_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "Cache_ReleaseHandle_Complete_Event"
//
#define EventEnabledCache_ReleaseHandle_Complete_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledCache_ReleaseHandle_Complete_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "Cache_ReleaseHandle_Complete_Event"
//
#define EventWriteCache_ReleaseHandle_Complete_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(Cache_ReleaseHandle_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_Cache_ReleaseHandle_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &Cache_ReleaseHandle_Complete_Event, RequestGuid) : 0
#define EventWriteCache_ReleaseHandle_Complete_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_Cache_ReleaseHandle_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &Cache_ReleaseHandle_Complete_Event, RequestGuid)
#define EventWriteCache_ReleaseHandle_Complete_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, Cache_ReleaseHandle_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_Cache_ReleaseHandle_Complete_Event(&(pContext)->Context, &Cache_ReleaseHandle_Complete_Event, RequestGuid) : 0
#define EventWriteCache_ReleaseHandle_Complete_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_Cache_ReleaseHandle_Complete_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &Cache_ReleaseHandle_Complete_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_Cache_ReleaseHandle_Complete_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "Cache_Update_Begin_Event"
//
#define EventEnabledCache_Update_Begin_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledCache_Update_Begin_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "Cache_Update_Begin_Event"
//
#define EventWriteCache_Update_Begin_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(Cache_Update_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_Cache_Update_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &Cache_Update_Begin_Event, RequestGuid) : 0
#define EventWriteCache_Update_Begin_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_Cache_Update_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &Cache_Update_Begin_Event, RequestGuid)
#define EventWriteCache_Update_Begin_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, Cache_Update_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_Cache_Update_Begin_Event(&(pContext)->Context, &Cache_Update_Begin_Event, RequestGuid) : 0
#define EventWriteCache_Update_Begin_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_Cache_Update_Begin_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &Cache_Update_Begin_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_Cache_Update_Begin_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "Cache_Update_Complete_Event"
//
#define EventEnabledCache_Update_Complete_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledCache_Update_Complete_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "Cache_Update_Complete_Event"
//
#define EventWriteCache_Update_Complete_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(Cache_Update_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_Cache_Update_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &Cache_Update_Complete_Event, RequestGuid) : 0
#define EventWriteCache_Update_Complete_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_Cache_Update_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &Cache_Update_Complete_Event, RequestGuid)
#define EventWriteCache_Update_Complete_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, Cache_Update_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_Cache_Update_Complete_Event(&(pContext)->Context, &Cache_Update_Complete_Event, RequestGuid) : 0
#define EventWriteCache_Update_Complete_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_Cache_Update_Complete_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &Cache_Update_Complete_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_Cache_Update_Complete_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "ReadData_GetBlocksContent_ReadBlocks_Begin_Event"
//
#define EventEnabledReadData_GetBlocksContent_ReadBlocks_Begin_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledReadData_GetBlocksContent_ReadBlocks_Begin_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "ReadData_GetBlocksContent_ReadBlocks_Begin_Event"
//
#define EventWriteReadData_GetBlocksContent_ReadBlocks_Begin_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(ReadData_GetBlocksContent_ReadBlocks_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_ReadBlocks_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_ReadBlocks_Begin_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_ReadBlocks_Begin_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_ReadBlocks_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_ReadBlocks_Begin_Event, RequestGuid)
#define EventWriteReadData_GetBlocksContent_ReadBlocks_Begin_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ReadData_GetBlocksContent_ReadBlocks_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_ReadBlocks_Begin_Event(&(pContext)->Context, &ReadData_GetBlocksContent_ReadBlocks_Begin_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_ReadBlocks_Begin_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_ReadBlocks_Begin_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &ReadData_GetBlocksContent_ReadBlocks_Begin_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_ReadBlocks_Begin_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "ReadData_GetBlocksContent_ReadBlocks_Complete_Event"
//
#define EventEnabledReadData_GetBlocksContent_ReadBlocks_Complete_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledReadData_GetBlocksContent_ReadBlocks_Complete_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "ReadData_GetBlocksContent_ReadBlocks_Complete_Event"
//
#define EventWriteReadData_GetBlocksContent_ReadBlocks_Complete_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(ReadData_GetBlocksContent_ReadBlocks_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_ReadBlocks_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_ReadBlocks_Complete_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_ReadBlocks_Complete_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_ReadBlocks_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_ReadBlocks_Complete_Event, RequestGuid)
#define EventWriteReadData_GetBlocksContent_ReadBlocks_Complete_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ReadData_GetBlocksContent_ReadBlocks_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_ReadBlocks_Complete_Event(&(pContext)->Context, &ReadData_GetBlocksContent_ReadBlocks_Complete_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_ReadBlocks_Complete_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_ReadBlocks_Complete_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &ReadData_GetBlocksContent_ReadBlocks_Complete_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_ReadBlocks_Complete_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "ReadData_GetBlocksContent_WaitForIO_Begin_Event"
//
#define EventEnabledReadData_GetBlocksContent_WaitForIO_Begin_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledReadData_GetBlocksContent_WaitForIO_Begin_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "ReadData_GetBlocksContent_WaitForIO_Begin_Event"
//
#define EventWriteReadData_GetBlocksContent_WaitForIO_Begin_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(ReadData_GetBlocksContent_WaitForIO_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_WaitForIO_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_WaitForIO_Begin_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_WaitForIO_Begin_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_WaitForIO_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_WaitForIO_Begin_Event, RequestGuid)
#define EventWriteReadData_GetBlocksContent_WaitForIO_Begin_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ReadData_GetBlocksContent_WaitForIO_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_WaitForIO_Begin_Event(&(pContext)->Context, &ReadData_GetBlocksContent_WaitForIO_Begin_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_WaitForIO_Begin_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_WaitForIO_Begin_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &ReadData_GetBlocksContent_WaitForIO_Begin_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_WaitForIO_Begin_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "ReadData_GetBlocksContent_WaitForIO_Complete_Event"
//
#define EventEnabledReadData_GetBlocksContent_WaitForIO_Complete_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledReadData_GetBlocksContent_WaitForIO_Complete_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "ReadData_GetBlocksContent_WaitForIO_Complete_Event"
//
#define EventWriteReadData_GetBlocksContent_WaitForIO_Complete_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(ReadData_GetBlocksContent_WaitForIO_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_WaitForIO_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_WaitForIO_Complete_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_WaitForIO_Complete_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_WaitForIO_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_WaitForIO_Complete_Event, RequestGuid)
#define EventWriteReadData_GetBlocksContent_WaitForIO_Complete_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ReadData_GetBlocksContent_WaitForIO_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_WaitForIO_Complete_Event(&(pContext)->Context, &ReadData_GetBlocksContent_WaitForIO_Complete_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_WaitForIO_Complete_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_WaitForIO_Complete_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &ReadData_GetBlocksContent_WaitForIO_Complete_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_WaitForIO_Complete_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event"
//
#define EventEnabledReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event"
//
#define EventWriteReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event, RequestGuid)
#define EventWriteReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event(&(pContext)->Context, &ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Begin_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event"
//
#define EventEnabledReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event"
//
#define EventWriteReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event(RequestGuid) \
        MCGEN_EVENT_ENABLED(ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event(&HashStoreEtwTracingProviderGuid_Context, &ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event, RequestGuid)
#define EventWriteReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event) \
        ? _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event(&(pContext)->Context, &ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event, RequestGuid) : 0
#define EventWriteReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_ReadData_GetBlocksContent_GetRecordsAndUpdateCache_Complete_Event _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RequestProcessSummaryEvent"
//
#define EventEnabledRequestProcessSummaryEvent() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledRequestProcessSummaryEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "RequestProcessSummaryEvent"
//
#define EventWriteRequestProcessSummaryEvent(RequestGuid, RequestMessage) \
        MCGEN_EVENT_ENABLED(RequestProcessSummaryEvent) \
        ? _mcgen_TEMPLATE_FOR_RequestProcessSummaryEvent(&HashStoreEtwTracingProviderGuid_Context, &RequestProcessSummaryEvent, RequestGuid, RequestMessage) : 0
#define EventWriteRequestProcessSummaryEvent_AssumeEnabled(RequestGuid, RequestMessage) \
        _mcgen_TEMPLATE_FOR_RequestProcessSummaryEvent(&HashStoreEtwTracingProviderGuid_Context, &RequestProcessSummaryEvent, RequestGuid, RequestMessage)
#define EventWriteRequestProcessSummaryEvent_ForContext(pContext, RequestGuid, RequestMessage) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RequestProcessSummaryEvent) \
        ? _mcgen_TEMPLATE_FOR_RequestProcessSummaryEvent(&(pContext)->Context, &RequestProcessSummaryEvent, RequestGuid, RequestMessage) : 0
#define EventWriteRequestProcessSummaryEvent_ForContextAssumeEnabled(pContext, RequestGuid, RequestMessage) \
        _mcgen_TEMPLATE_FOR_RequestProcessSummaryEvent(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &RequestProcessSummaryEvent, RequestGuid, RequestMessage)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RequestProcessSummaryEvent _mcgen_PASTE2(McTemplateU0ss_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RehashBeginEvent"
//
#define EventEnabledRehashBeginEvent() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledRehashBeginEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "RehashBeginEvent"
//
#define EventWriteRehashBeginEvent(RequestGuid) \
        MCGEN_EVENT_ENABLED(RehashBeginEvent) \
        ? _mcgen_TEMPLATE_FOR_RehashBeginEvent(&HashStoreEtwTracingProviderGuid_Context, &RehashBeginEvent, RequestGuid) : 0
#define EventWriteRehashBeginEvent_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_RehashBeginEvent(&HashStoreEtwTracingProviderGuid_Context, &RehashBeginEvent, RequestGuid)
#define EventWriteRehashBeginEvent_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RehashBeginEvent) \
        ? _mcgen_TEMPLATE_FOR_RehashBeginEvent(&(pContext)->Context, &RehashBeginEvent, RequestGuid) : 0
#define EventWriteRehashBeginEvent_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_RehashBeginEvent(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &RehashBeginEvent, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RehashBeginEvent _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RehashCompleteEvent"
//
#define EventEnabledRehashCompleteEvent() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledRehashCompleteEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "RehashCompleteEvent"
//
#define EventWriteRehashCompleteEvent(RequestGuid) \
        MCGEN_EVENT_ENABLED(RehashCompleteEvent) \
        ? _mcgen_TEMPLATE_FOR_RehashCompleteEvent(&HashStoreEtwTracingProviderGuid_Context, &RehashCompleteEvent, RequestGuid) : 0
#define EventWriteRehashCompleteEvent_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_RehashCompleteEvent(&HashStoreEtwTracingProviderGuid_Context, &RehashCompleteEvent, RequestGuid)
#define EventWriteRehashCompleteEvent_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RehashCompleteEvent) \
        ? _mcgen_TEMPLATE_FOR_RehashCompleteEvent(&(pContext)->Context, &RehashCompleteEvent, RequestGuid) : 0
#define EventWriteRehashCompleteEvent_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_RehashCompleteEvent(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &RehashCompleteEvent, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RehashCompleteEvent _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RehashExpandBeginEvent"
//
#define EventEnabledRehashExpandBeginEvent() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledRehashExpandBeginEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "RehashExpandBeginEvent"
//
#define EventWriteRehashExpandBeginEvent(RequestGuid) \
        MCGEN_EVENT_ENABLED(RehashExpandBeginEvent) \
        ? _mcgen_TEMPLATE_FOR_RehashExpandBeginEvent(&HashStoreEtwTracingProviderGuid_Context, &RehashExpandBeginEvent, RequestGuid) : 0
#define EventWriteRehashExpandBeginEvent_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_RehashExpandBeginEvent(&HashStoreEtwTracingProviderGuid_Context, &RehashExpandBeginEvent, RequestGuid)
#define EventWriteRehashExpandBeginEvent_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RehashExpandBeginEvent) \
        ? _mcgen_TEMPLATE_FOR_RehashExpandBeginEvent(&(pContext)->Context, &RehashExpandBeginEvent, RequestGuid) : 0
#define EventWriteRehashExpandBeginEvent_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_RehashExpandBeginEvent(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &RehashExpandBeginEvent, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RehashExpandBeginEvent _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RehashExpandCompleteEvent"
//
#define EventEnabledRehashExpandCompleteEvent() _mcgen_EVENT_BIT_SET(Microsoft_AdCenter_HashStore_ETWProviderEnableBits, 0)
#define EventEnabledRehashExpandCompleteEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->EnableBits, 0)

//
// Event write macros for event "RehashExpandCompleteEvent"
//
#define EventWriteRehashExpandCompleteEvent(RequestGuid) \
        MCGEN_EVENT_ENABLED(RehashExpandCompleteEvent) \
        ? _mcgen_TEMPLATE_FOR_RehashExpandCompleteEvent(&HashStoreEtwTracingProviderGuid_Context, &RehashExpandCompleteEvent, RequestGuid) : 0
#define EventWriteRehashExpandCompleteEvent_AssumeEnabled(RequestGuid) \
        _mcgen_TEMPLATE_FOR_RehashExpandCompleteEvent(&HashStoreEtwTracingProviderGuid_Context, &RehashExpandCompleteEvent, RequestGuid)
#define EventWriteRehashExpandCompleteEvent_ForContext(pContext, RequestGuid) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RehashExpandCompleteEvent) \
        ? _mcgen_TEMPLATE_FOR_RehashExpandCompleteEvent(&(pContext)->Context, &RehashExpandCompleteEvent, RequestGuid) : 0
#define EventWriteRehashExpandCompleteEvent_ForContextAssumeEnabled(pContext, RequestGuid) \
        _mcgen_TEMPLATE_FOR_RehashExpandCompleteEvent(&_mcgen_CheckContextType_Microsoft_AdCenter_HashStore_ETWProvider(pContext)->Context, &RehashExpandCompleteEvent, RequestGuid)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RehashExpandCompleteEvent _mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Template Functions
//

//
// Function for template "RequestProcessingTemplate" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0s_def
#define McTemplateU0s_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0s_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCSTR  _Arg0
    )
{
#define McTemplateU0s_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0s_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(char)) : (ULONG)sizeof("NULL"));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0s_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0s_def

//
// Function for template "RequestSummaryTemplate" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0ss_def
#define McTemplateU0ss_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0ss_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCSTR  _Arg0,
    _In_opt_ PCSTR  _Arg1
    )
{
#define McTemplateU0ss_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0ss_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(char)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(char)) : (ULONG)sizeof("NULL"));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0ss_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0ss_def

//
// Function for template "HittedKeyTemplate" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0sss_def
#define McTemplateU0sss_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0sss_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCSTR  _Arg0,
    _In_opt_ PCSTR  _Arg1,
    _In_opt_ PCSTR  _Arg2
    )
{
#define McTemplateU0sss_ARGCOUNT 3

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0sss_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],
                        (_Arg0 != NULL) ? _Arg0 : "NULL",
                        (_Arg0 != NULL) ? (ULONG)((strlen(_Arg0) + 1) * sizeof(char)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[2],
                        (_Arg1 != NULL) ? _Arg1 : "NULL",
                        (_Arg1 != NULL) ? (ULONG)((strlen(_Arg1) + 1) * sizeof(char)) : (ULONG)sizeof("NULL"));

    EventDataDescCreate(&EventData[3],
                        (_Arg2 != NULL) ? _Arg2 : "NULL",
                        (_Arg2 != NULL) ? (ULONG)((strlen(_Arg2) + 1) * sizeof(char)) : (ULONG)sizeof("NULL"));

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0sss_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0sss_def

//
// Function for template "ReadMemoryRecordTemplate" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateU0xq_def
#define McTemplateU0xq_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateU0xq_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned __int64  _Arg0,
    _In_ const unsigned int  _Arg1
    )
{
#define McTemplateU0xq_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateU0xq_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const unsigned int)  );

    return McGenEventWrite(Context, Descriptor, NULL, McTemplateU0xq_ARGCOUNT + 1, EventData);
}
#endif // McTemplateU0xq_def

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#if defined(__cplusplus)
}
#endif

#define MSG_HashStoreDataRefreshTask_Refresh_PrepareUpdate_Begin_message 0x3001000BL
#define MSG_HashStoreDataRefreshTask_Refresh_PrepareUpdate_Complete_message 0x3001000CL
#define MSG_HashStoreDataRefreshTask_Refresh_UpdateTable_Begin_message 0x3001000DL
#define MSG_HashStoreDataRefreshTask_Refresh_UpdateTable_Complete_message 0x3001000EL
#define MSG_HashStoreReadDataTask_ReadData_Prepare_Begin_message 0x3002000BL
#define MSG_HashStoreReadDataTask_ReadData_Prepare_Complete_message 0x3002000CL
#define MSG_HashStoreReadDataTask_ReadData_GetBlockInfo_Begin_message 0x3002000DL
#define MSG_HashStoreReadDataTask_ReadData_GetBlockInfo_Complete_message 0x3002000EL
#define MSG_HashStoreReadDataTask_ReadData_GetBlocksContent_Begin_message 0x3002000FL
#define MSG_HashStoreReadDataTask_ReadData_GetBlocksContent_Complete_message 0x30020010L
#define MSG_HashStoreCacheProcessingTask_Cache_Lookup_Begin_message 0x3003000BL
#define MSG_HashStoreCacheProcessingTask_Cache_Lookup_Complete_message 0x3003000CL
#define MSG_HashStoreCacheProcessingTask_Cache_ReleaseHandle_Begin_message 0x3003000DL
#define MSG_HashStoreCacheProcessingTask_Cache_ReleaseHandle_Complete_message 0x3003000EL
#define MSG_HashStoreCacheProcessingTask_Cache_Update_Begin_message 0x3003000FL
#define MSG_HashStoreCacheProcessingTask_Cache_Update_Complete_message 0x30030010L
#define MSG_HashStoreGetContentsDetailsTask_GetBlocksContent_ReadBlocks_Begin_message 0x3004000BL
#define MSG_HashStoreGetContentsDetailsTask_GetBlocksContent_ReadBlocks_Complete_message 0x3004000CL
#define MSG_HashStoreGetContentsDetailsTask_GetBlocksContent_WaitForIO_Begin_message 0x3004000DL
#define MSG_HashStoreGetContentsDetailsTask_GetBlocksContent_WaitForIO_Complete_message 0x3004000EL
#define MSG_HashStoreGetContentsDetailsTask_GetBlocksContent_GetRecordsAndUpdateCache_Begin_message 0x3004000FL
#define MSG_HashStoreGetContentsDetailsTask_GetBlocksContent_GetRecordsAndUpdateCache_Complete_message 0x30040010L
#define MSG_HashStoreRequestSummaryTask_RequestProcessSummary_message 0x3005000BL
#define MSG_HashStoreInformationTask_ReadMemoryRecord_message 0x3006000BL
#define MSG_HashStoreInformationTask_HittedKey_message 0x3006000CL
#define MSG_HashStoreRehashTask_RehashBegin_message 0x3007000BL
#define MSG_HashStoreRehashTask_RehashComplete_message 0x3007000CL
#define MSG_HashStoreRehashTask_RehashExpandBegin_message 0x3007000DL
#define MSG_HashStoreRehashTask_RehashExpandComplete_message 0x3007000EL
#define MSG_level_Informational              0x50000004L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_task_HashStoreDataRefreshTask_message 0x70000001L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_task_HashStoreReadDataTask_message 0x70000002L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_task_HashStoreCacheProcessingTask_message 0x70000003L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_task_HashStoreGetContentsDetailsTask_message 0x70000004L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_task_HashStoreRequestSummaryTask_message 0x70000005L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_task_HashStoreInformationTask_message 0x70000006L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_task_HashStoreRehashTask_message 0x70000007L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_provider_message 0x90000001L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_1_message 0xB0000001L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_2_message 0xB0000002L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_3_message 0xB0000003L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_4_message 0xB0000004L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_5_message 0xB0000005L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_6_message 0xB0000006L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_7_message 0xB0000007L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_8_message 0xB0000008L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_9_message 0xB0000009L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_10_message 0xB000000AL
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_11_message 0xB000000BL
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_12_message 0xB000000CL
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_13_message 0xB000000DL
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_14_message 0xB000000EL
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_15_message 0xB000000FL
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_16_message 0xB0000010L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_17_message 0xB0000011L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_18_message 0xB0000012L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_19_message 0xB0000013L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_20_message 0xB0000014L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_21_message 0xB0000015L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_22_message 0xB0000016L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_23_message 0xB0000017L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_24_message 0xB0000018L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_25_message 0xB0000019L
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_26_message 0xB000001AL
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_27_message 0xB000001BL
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_28_message 0xB000001CL
#define MSG_Microsoft_AdCenter_HashStore_ETWProvider_event_29_message 0xB000001DL
